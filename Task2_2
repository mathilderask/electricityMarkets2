using CSV, DataFrames, Dates
include("functions.jl")  # Load functions from Functions.jl

# === Start timer ===
start_time = now()

# === Load and clean data ===
df = CSV.read("Stochastic_Load_Profiles.csv", DataFrame)
load_profiles_clean = df[2:end, 1:end-1]  
load_profiles = parse.(Float64, replace.(string.(Matrix(load_profiles_clean)), ',' => '.'))


# === Extract out-of-sample data (rows 101–300) ===
test_profiles = load_profiles[end-199:end, :]  # Access the last 200 rows (out-of-sample data)
N_test, T = size(test_profiles)
p_threshold = 0.9
min_required_minutes = ceil(Int, p_threshold * T)  # Minimum number of minutes to pass


# === Define the two bids from Section 2.1 ===
optimal_bid_ALSOX = 225.26  # ← replace with result from 2.1 (ALSO-X)   # Manual test: 234 kW (91.5%)
optimal_bid_CVaR  = 242.55  # ← replace with result from 2.1 (CVaR)     # Manual test: 234 kW (91.5%)

# === Evaluate both bids ===
margins_ALSOX = evaluate_bid(test_profiles, optimal_bid_ALSOX, "ALSO-X")
margins_CVaR  = evaluate_bid(test_profiles, optimal_bid_CVaR,  "CVaR")
nothing

# === End timer and report duration ===
end_time = now()
println("Total execution time: ", end_time - start_time)