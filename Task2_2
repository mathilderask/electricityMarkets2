using CSV, DataFrames

# === Load and clean data ===
df = CSV.read("Stochastic_Load_Profiles.csv", DataFrame)
load_profiles_clean = df[2:end, 1:end-1]  # Check with Mathilde if this is correctly implemented in 2.1
load_profiles = parse.(Float64, replace.(string.(Matrix(load_profiles_clean)), ',' => '.'))

"""
load_profiles = Matrix{Float64}(undef, size(load_profiles_clean)...)

for j in 1:size(load_profiles_clean, 2)
    col = load_profiles_clean[!, j]
    load_profiles[:, j] = [x isa Float64 ? x : parse(Float64, replace(string(x), ',' => '.')) for x in col]
end
"""

# === Extract out-of-sample data (rows 101–300) ===
test_profiles = load_profiles[end-199:end, :]  # Access the last 200 rows (out-of-sample data)
N_test, T = size(test_profiles)
p_threshold = 0.9
min_required_minutes = ceil(Int, p_threshold * T)


# === Define the two bids from Section 2.1 ===
optimal_bid_ALSOX = 440.05  # ← replace with result from 2.1 (ALSO-X)
optimal_bid_CVaR  = 210.75  # ← replace with result from 2.1 (CVaR)


function evaluate_bid(test_profiles, bid, label)
    margin_matrix = test_profiles .- bid  # Same shape as test_profiles
    # Count how many minutes are satisfied for each profile
    compliance = sum(margin_matrix .>= 0, dims=2)  # Compute sums for each row
    compliance = vec(compliance)  # Ensure it's a vector, not a matrix
    
    # Compare compliance with the threshold (min_required_minutes)
    passed_count = sum(compliance .>= min_required_minutes)
    
    p90_ratio = passed_count / N_test * 100
    println("P90 Verification for ", label)
    println("Compliant profiles: ", passed_count, " out of ", N_test)
    println("Compliance rate: ", round(p90_ratio, digits=2), "%")

    println("Example reserve margins for first 3 scenarios (", label, "):")
    for i in 1:3
        println("Scenario ", i, ": ", round.(margin_matrix[i, :], digits=2))
    end
    println("Margin matrix", margin_matrix)
    return margin_matrix
end

# === Evaluate both bids ===
margins_ALSOX = evaluate_bid(test_profiles, optimal_bid_ALSOX, "ALSO-X")
margins_CVaR  = evaluate_bid(test_profiles, optimal_bid_CVaR,  "CVaR")
nothing


# === (Optional) Export to CSV for plotting outside Julia ===
# using DelimitedFiles
# writedlm("margins_ALSOX.csv", margins_ALSOX, ',')
# writedlm("margins_CVaR.csv",  margins_CVaR,  ',')