using CSV, DataFrames

# === Load and clean data ===
df = CSV.read("Stochastic_Load_Profiles.csv", DataFrame)
load_profiles_clean = df[2:end, 1:end-1]  
load_profiles = parse.(Float64, replace.(string.(Matrix(load_profiles_clean)), ',' => '.'))


# === Extract out-of-sample data (rows 101–300) ===
test_profiles = load_profiles[end-199:end, :]  # Access the last 200 rows (out-of-sample data)
N_test, T = size(test_profiles)
p_threshold = 0.9
min_required_minutes = ceil(Int, p_threshold * T)  # Minimum number of minutes to pass


# === Define the two bids from Section 2.1 ===
optimal_bid_ALSOX = 441  # ← replace with result from 2.1 (ALSO-X)
optimal_bid_CVaR  = 220  # ← replace with result from 2.1 (CVaR)


function evaluate_bid(test_profiles, bid, label)
    margin_matrix = test_profiles .- bid  # Same shape as test_profiles
    # Count how many minutes are satisfied for each profile
    compliance = sum(margin_matrix .>= 0, dims=2)  # Compute sums for each row
    compliance = vec(compliance)  # Ensure it's a vector, not a matrix
    
    # Compare compliance with the threshold (min_required_minutes)
    passed_count = sum(compliance .>= min_required_minutes)
    
    p90_ratio = passed_count / N_test * 100
    println("P90 Verification for ", label)
    println("Compliant profiles: ", passed_count, " out of ", N_test)
    println("Compliance rate: ", round(p90_ratio, digits=2), "%")


    return margin_matrix
end

# === Evaluate both bids ===
margins_ALSOX = evaluate_bid(test_profiles, optimal_bid_ALSOX, "ALSO-X")
margins_CVaR  = evaluate_bid(test_profiles, optimal_bid_CVaR,  "CVaR")
nothing
