#import Pkg, JuMP, GLPK, DataFrames, CSV, Random, HiGHS, Statistics
using Pkg, JuMP, GLPK, DataFrames, CSV, Random, HiGHS, Statistics

include("functions.jl") # Load

p_real_DF = CSV.read("windscenarios_zone2.csv", DataFrame;  delim=',', header=true)
lambda_DA_DF = CSV.read("DA_hourly_price_scenarios.csv", DataFrame;  delim=',', header=true)
scenarios_DF = CSV.read("scenario_combinations.csv", DataFrame; delim=',', header=true)
system_status_DF = CSV.read("power_system_conditions.csv", DataFrame; delim=',', header=true)

scenario_ID = scenarios_DF[:, 1]
Random.seed!(8) #Makes the random number generation reproducible


prof_in_sample_200_1price , prof_out_sample_1400_1price = cross_validation(200, "one-price")
prof_in_sample_200_2price , prof_out_sample_1400_2price = cross_validation(200, "two-price")

println("In-sample average profit one price (200 scenario optimisation): ", prof_in_sample_200_1price)
println("Out-of-sample average profit one price (200 scenario optimisation): ", prof_out_sample_1400_1price)
println("In-sample average profit two price (200 scenario optimisation): ", prof_in_sample_200_2price)
println("Out-of-sample average profit two price (200 scenario optimisation): ", prof_out_sample_1400_2price)










#=
prof_in_sample_400_1price , prof_out_sample_1200_1price = cross_validation(400, "one-price")
prof_in_sample_200_1price , prof_out_sample_1400_1price = cross_validation(200, "one-price")
prof_in_sample_100_1price , prof_out_sample_1500_1price = cross_validation(100, "one-price")
prof_in_sample_20_1price , prof_out_sample_1580_1price = cross_validation(20, "one-price")

Out_sample_profit = [prof_out_sample_1580_1price, prof_out_sample_1500_1price, prof_out_sample_1400_1price, prof_out_sample_1200_1price]
In_sample_profit = [prof_in_sample_20_1price, prof_in_sample_100_1price, prof_in_sample_200_1price, prof_in_sample_400_1price]
Sample_size = [20, 100, 200, 400]

#println("In-sample average profit: ", avg_prof_in_sample)
#println("Out-of-sample average profit: ", avg_prof_out_sample)

# Convert category labels to positions

using PyPlot
# Create bar plot with grouped bars
figure(figsize=(8, 5))

plot(Sample_size, In_sample_profit, marker="o", label="In-sample profit", linewidth=2)
plot(Sample_size, Out_sample_profit, marker="s", label="Out-of-sample profit", linewidth=2)

# Labels and formatting
xlabel("Number of In-sample Scenarios")
ylabel("Expected Profit")
title("In- vs Out-of-Sample Profit (One-Price Scheme)")
legend()
grid(true)
tight_layout()
show()
=#